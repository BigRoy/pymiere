import os
from pymiere.utils import MyStr, TYPE_CORRESPONDENCE, read_json_file

def generate_start_vars(data):
    if data.get("description") or data.get("help"):
        raise NotImplementedError()
    if data.get("type") != "root":
        raise ValueError("Wrong json file loaded : not root type")

    code = MyStr()
    for prop_name, prop_value in data.get("props").items():
        if prop_value.get("dataType") in ["undefined"]:
            continue
        if prop_value.get("dataType") in TYPE_CORRESPONDENCE:
            code = code.add_line("{0} = {1}(_eval_script_returning_object('{0}', as_kwargs=True))".format(prop_name, TYPE_CORRESPONDENCE[prop_value.get("dataType")]))
        elif prop_value.get("dataType") not in ["object", "Object", "unknown"]:
            cls = prop_value.get("dataType")
            if cls == "$":
                code = code.add_line("dollar = Dollar(**_eval_script_returning_object('$', as_kwargs=True))")
            else:
                code = code.add_line("{0} = {1}(**_eval_script_returning_object('{0}', as_kwargs=True))".format(prop_name, cls))

    # for func_name, func_value in data.get()

    return code


if __name__ == "__main__":
    data = read_json_file(os.path.join(__file__, "..", "class_datas", "start_vars.json"))
    result_code = "from pymiere.core import _eval_script_returning_object\nfrom pymiere.autogenerated.premiere_objects import *\n"
    result_code += generate_start_vars(data)
    with open(os.path.join(__file__, "..", "..", "autogenerated", "start_vars.py"), "w") as f:
        f.write(result_code)
